#+EXPORT_FILE_NAME: ../README.md
#+OPTIONS: toc:1 |:t ^:nil tags:nil

# Place warning at the top of the exported file
#+BEGIN_EXAMPLE
<!-- This file is generated automatically from metadata -->
<!-- File edits may be overwritten! -->
#+END_EXAMPLE

* Project Specific Variables                                       :noexport:

#+NAME: ros-package-names
#+BEGIN_SRC text :exports none :noweb yes
weigher
weigher_interfaces
#+END_SRC

#+NAME: repository-name
#+BEGIN_SRC text :exports none :noweb yes
weigher_ros
#+END_SRC

#+NAME: version
#+BEGIN_SRC text :exports none :noweb yes
0.1.0
#+END_SRC

#+NAME: description
#+BEGIN_SRC text :exports none :noweb yes
ROS 2 weigh scale interface.
#+END_SRC

#+NAME: ros-distribution
#+BEGIN_SRC text :exports none :noweb yes
humble
#+END_SRC

# Place multiple python packages on one line separated by spaces
#+NAME: python-dependency-list
#+BEGIN_SRC text :exports none :noweb yes
loadstar_sensors_interface
#+END_SRC

#+NAME: references
#+BEGIN_SRC text :exports none :noweb yes
https://github.com/janelia-pypi/loadstar_sensors_interface_python
#+END_SRC

#+NAME: creation-date
#+BEGIN_SRC text :exports none :noweb yes
2022-12-14
#+END_SRC

* General and Derived Variables                                    :noexport:

#+NAME: release-month-day
#+BEGIN_SRC emacs-lisp :exports none :noweb yes
(format-time-string "%m-%d")
#+END_SRC

#+NAME: release-year
#+BEGIN_SRC emacs-lisp :exports none :noweb ye
(format-time-string "%Y")
#+END_SRC

#+NAME: release-date
#+BEGIN_SRC text :exports none :noweb yes
<<release-year()>>-<<release-month-day()>>
#+END_SRC

#+NAME: license
#+BEGIN_SRC text :exports none :noweb yes
BSD-3-Clause
#+END_SRC

#+NAME: guix-license
#+BEGIN_SRC text :exports none :noweb yes
license:bsd-3
#+END_SRC

#+NAME: license-files
#+BEGIN_SRC text :exports none :noweb yes
LICENSE
#+END_SRC

#+NAME: repository-organization
#+BEGIN_SRC text :exports none :noweb yes
janelia-ros
#+END_SRC

#+NAME: forge
#+BEGIN_SRC text :exports none :noweb yes
github.com
#+END_SRC

#+NAME: repository-url
#+BEGIN_SRC text :exports none :noweb yes
https://<<forge>>/<<repository-organization>>/<<repository-name>>
#+END_SRC

#+NAME: git-clone-url
#+BEGIN_SRC text :exports none :noweb yes
git@<<forge>>:<<repository-organization>>/<<repository-name>>.git
#+END_SRC

#+NAME: author-given-name
#+BEGIN_SRC text :exports none :noweb yes
Peter
#+END_SRC

#+NAME: author-family-name
#+BEGIN_SRC text :exports none :noweb yes
Polidoro
#+END_SRC

#+NAME: author
#+BEGIN_SRC text :exports none :noweb yes
<<author-given-name>> <<author-family-name>>
#+END_SRC

#+NAME: email
#+BEGIN_SRC text :exports none :noweb yes
peter@polidoro.io
#+END_SRC

#+NAME: affiliation
#+BEGIN_SRC text :exports none :noweb yes
Howard Hughes Medical Institute
#+END_SRC

#+NAME: copyright
#+BEGIN_SRC text :exports none :noweb yes
<<release-year()>> <<affiliation>>
#+END_SRC

#+NAME: programming-language
#+BEGIN_SRC text :exports none :noweb yes
Python 3
#+END_SRC

* About

#+BEGIN_SRC markdown :noweb yes
- ROS Package Names:
  - <<ros-package-names>>
- ROS Distribution: <<ros-distribution>>
- Description: <<description>>
- Version: <<version>>
- Release Date: <<release-date>>
- Creation Date: <<creation-date>>
- License: <<license>>
- URL: <<repository-url>>
- Author: <<author>>
- Email: <<email>>
- Copyright: <<copyright>>
- References:
  - <<references>>
- Python Dependency List: <<python-dependency-list>>
#+END_SRC

* Setup

* Development

** metadata

*** Install Guix

[[https://guix.gnu.org/manual/en/html_node/Binary-Installation.html][Install Guix]]

*** Clone Repository

#+BEGIN_SRC sh :noweb yes
git clone <<git-clone-url>>
cd <<repository-name>>
#+END_SRC

*** Edit metadata.org

#+BEGIN_SRC sh :noweb yes
make -f .metadata/Makefile metadata-edits
#+END_SRC

*** Tangle metadata.org

#+BEGIN_SRC sh :noweb yes
make -f .metadata/Makefile metadata
#+END_SRC

** Docker

*** Install Docker

   [[https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository]]

*** Run Docker container

#+BEGIN_SRC sh :noweb yes
make -f .metadata/Makefile docker-container
#+END_SRC

** Ubuntu

*** Install ROS

#+BEGIN_SRC text :noweb yes
https://docs.ros.org/en/<<ros-distribution>>/Installation/Ubuntu-Install-Debians.html
#+END_SRC

*** Configure Environment

#+BEGIN_SRC text :noweb yes
https://docs.ros.org/en/<<ros-distribution>>/Installation/Ubuntu-Install-Debians.html
#+END_SRC

*** Create Workspace

#+BEGIN_SRC text :noweb yes
https://docs.ros.org/en/<<ros-distribution>>/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.html
#+END_SRC

*** Clone this repository into workspace

#+BEGIN_SRC sh :noweb yes
mkdir -p ~/ros2_ws/src && cd ~/ros2_ws/src
git clone <<git-clone-url>>
#+END_SRC

*** Setup Python virtualenv

#+BEGIN_SRC sh :noweb yes
sudo apt install python3-venv
cd ~/ros2_ws
python3 -m venv venv
touch venv/COLCON_IGNORE
#+END_SRC

*** Source the ROS underlay and activate the Python virtualenv

#+BEGIN_SRC sh :noweb yes
cd ~/ros2_ws
source src/<<repository-name>>/.metadata/setup.bash
#+END_SRC

*** Build ROS packages

#+BEGIN_SRC sh :noweb yes
cd ~/ros2_ws
colcon build --symlink-install
#+END_SRC

*** Source the ROS overlay

#+BEGIN_SRC sh :noweb yes
cd ~/ros2_ws
source install/setup.bash
#+END_SRC

*** Run the weigher node

#+BEGIN_SRC sh :noweb yes
ros2 run weigher weigher_node
#+END_SRC

*** Echo the weigher topic

Open a new termial

#+BEGIN_SRC sh :noweb yes
ros2 topic echo /weight
#+END_SRC

* Tangled Files                                                    :noexport:

#+BEGIN_SRC scheme :tangle guix/channels.scm :exports none :noweb yes
;; This file is generated automatically from metadata
;; File edits may be overwritten!
(list (channel
        (name 'guix)
        (url "https://git.savannah.gnu.org/git/guix.git")
        (branch "master")
        (commit
          "9a0f840b383839bd3d02b7328cf4396783f2fd90")
        (introduction
          (make-channel-introduction
            "9edb3f66fd807b096b48283debdcddccfea34bad"
            (openpgp-fingerprint
              "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))
#+END_SRC

#+BEGIN_SRC scheme :tangle guix/manifest.scm :exports none :noweb yes
;; This file is generated automatically from metadata
;; File edits may be overwritten!
(specifications->manifest
 '("coreutils"
   "make"
   "bash"
   "git"
   "python"
   "python-pip"
   "python-virtualenv"
   "emacs"
   "emacs-org"
   "emacs-ox-gfm"
   "imagemagick"
   "inkscape"))
#+END_SRC

#+BEGIN_SRC text :tangle .alias :exports none :noweb yes
# This file is generated automatically from metadata
# File edits may be overwritten!
alias ,make=make\ -f\ .metadata/Makefile
#+END_SRC

#+BEGIN_SRC text :tangle Makefile :exports none :noweb yes
# This file is generated automatically from metadata
# File edits may be overwritten!

.PHONY: upload
upload: metadata package twine add clean

MAKEFILE_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))
MAKEFILE_DIR := $(notdir $(patsubst %/,%,$(dir $(MAKEFILE_PATH))))
GUIX-TIME-MACHINE = guix time-machine -C $(MAKEFILE_DIR)/guix/channels.scm
GUIX-SHELL = $(GUIX-TIME-MACHINE) -- shell -m $(MAKEFILE_DIR)/guix/manifest.scm
CONTAINER = --container --preserve='^DISPLAY$$' --preserve='^TERM$$'
GUIX-CONTAINER = $(GUIX-SHELL) $(CONTAINER)
VENV-SHELL = rm -rf .venv; mkdir .venv; python3 -m venv .venv; source .venv/bin/activate
DOCKER-IMAGE = docker build -f $(MAKEFILE_DIR)/docker/Dockerfile -t <<repository-name>> .
DOCKER-CONTAINER = $(DOCKER-IMAGE); docker run -it <<repository-name>>

.PHONY: guix-container
guix-container:
	$(GUIX-CONTAINER)

.PHONY: requirements.txt
requirements.txt:
	$(GUIX-CONTAINER) -- $(VENV-SHELL);\
	pip install <<python-dependency-list>>;\
	pip freeze > requirements.txt;\
	deactivate;\
	rm -rf .venv

.PHONY: docker-container
docker-container:
	$(DOCKER-CONTAINER)

.PHONY: metadata-edits
metadata-edits:
	$(GUIX-CONTAINER) -- sh -c "emacs -q --no-site-file --no-site-lisp --no-splash -l $(MAKEFILE_DIR)/emacs/init.el --file $(MAKEFILE_DIR)/metadata.org"

.PHONY: metadata
metadata: requirements.txt
	$(GUIX-CONTAINER) -- sh -c "emacs --batch -Q  -l $(MAKEFILE_DIR)/emacs/init.el --eval '(process-org \"$(MAKEFILE_DIR)/metadata.org\")'"
#+END_SRC

#+BEGIN_SRC scheme :tangle emacs/init.el :exports none :noweb yes
;; This file is generated automatically from metadata
;; File edits may be overwritten!
(require 'org)
(require 'ox-org)

(eval-after-load "org"
  '(require 'ox-gfm nil t))

(setq make-backup-files nil)
(setq org-confirm-babel-evaluate nil)

(setq python-indent-guess-indent-offset t)
(setq python-indent-guess-indent-offset-verbose nil)

(defun tangle-org (org-file)
  "Tangle org file"
  (unless (string= "org" (file-name-extension org-file))
    (error "INFILE must be an org file."))
  (org-babel-tangle-file org-file))

(defun export-org-to-markdown (org-file)
  "Export org file to gfm file"
  (unless (string= "org" (file-name-extension org-file))
    (error "INFILE must be an org file."))
  (let ((org-file-buffer (find-file-noselect org-file)))
    (with-current-buffer org-file-buffer
      (org-open-file (org-gfm-export-to-markdown)))))

(defun process-org (org-file)
  "Tangle and export org file"
  (progn (tangle-org org-file)
         (export-org-to-markdown org-file)))


(setq enable-local-variables nil)
(setq tangle-external-files t)
#+END_SRC

#+BEGIN_SRC text :tangle setup.bash :exports none :noweb yes
# This file is generated automatically from metadata
# File edits may be overwritten!
source /opt/ros/<<ros-distribution>>/setup.bash
source venv/bin/activate
#+END_SRC

#+HEADER: :tangle (if tangle-external-files "../AUTHORS" "no")
#+BEGIN_SRC text :exports none :noweb yes
<<author>>
#+END_SRC

#+HEADER: :tangle (if tangle-external-files "../codemeta.json" "no")
#+BEGIN_SRC js :exports none :noweb yes
{
    "@context": "https://doi.org/10.5063/schema/codemeta-2.0",
    "@type": "SoftwareSourceCode",
    "license": "https://spdx.org/licenses/<<license>>",
    "codeRepository": "<<repository-url>>",
    "dateCreated": "<<creation-date>>",
    "dateModified": "<<release-date>>",
    "name": "<<repository-name>>",
    "version": "<<version>>",
    "description": "<<description>>",
    "programmingLanguage": [
        "<<programming-language>>"
    ],
    "author": [
        {
            "@type": "Person",
            "givenName": "<<author-given-name>>",
            "familyName": "<<author-family-name>>",
            "email": "<<email>>",
            "affiliation": {
                "@type": "Organization",
                "name": "<<affiliation>>"
            }
        }
    ]
}
#+END_SRC

#+BEGIN_SRC scheme :tangle docker/Dockerfile :exports none :noweb yes
ARG FROM_IMAGE=ros:<<ros-distribution>>
#+END_SRC

#+NAME: license-text
#+BEGIN_SRC text :exports none :noweb yes
Janelia Open-Source Software (3-clause BSD License)

Copyright <<copyright>>

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#+END_SRC

#+HEADER: :tangle (if tangle-external-files "../LICENSE" "no")
#+BEGIN_SRC text :exports none :noweb yes
<<license-text>>
#+END_SRC

#+BEGIN_SRC text :tangle LICENSE :exports none :noweb yes
<<license-text>>
#+END_SRC

;; Local Variables:
;; eval: (setq after-save-hook nil)
;; eval: (setq org-confirm-babel-evaluate nil)
;; eval: (setq tangle-external-files nil)
;; eval: (setq python-package-dir "")
;; End:
